{"version":3,"file":"static/js/372.378520a5.chunk.js","mappings":"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","sources":["components/common/checkbox/Checkbox.jsx","components/bashGenerator/steps/packageManager/packageManager.jsx","components/bashGenerator/steps/installPackages/installPackages.jsx","components/common/modal/Modal.jsx","components/bashGenerator/steps/getScript/getScript.jsx","components/common/steps/Steps.jsx","components/common/steps/StepsControl.jsx","components/bashGenerator/bashGenerator.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Checkbox.css'\n\nconst Checkbox = ({ checked, disabled, label, value, onChange }) => (\n<label className={`checkbox ${checked && \"checkbox--checked\"} ${disabled && \"checkbox--disabled\"}`}>\n  <input\n    type=\"checkbox\"\n    disabled={disabled}\n    checked={checked}\n    value={value}\n    onChange={onChange}\n  />\n  {label}\n</label>\n);\n\nCheckbox.propTypes = {\n  checked: PropTypes.bool,\n  disabled: PropTypes.bool,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  onChange: PropTypes.func\n};\n\nexport default Checkbox;\n","import React, {useCallback} from \"react\";\nimport PropTypes from 'prop-types';\nimport './PackageManager.css';\nimport Checkbox from \"../../../common/checkbox/Checkbox\";\n\nimport packageManagers from \"./../../../../database/packageManagers.json\";\n\nconst PackageManager = ({ data: { selectedManager, setSelectedManager } }) => {\n  const handlePackageManagerChange = useCallback(codeName => {\n    setSelectedManager(codeName);\n  }, [setSelectedManager]);\n\n  return (\n    <article className=\"package-manager\">\n      <h5 className=\"package-manager__title\">\n        Which package manager to use?\n      </h5>\n      <div className=\"package-manager__form\">\n        <>\n          {packageManagers.map(({ id, codeName, name, status }) => (\n            <Checkbox\n              className=\"package-manager__label\"\n              key={codeName+id}\n              checked={selectedManager === codeName}\n              disabled={!status}\n              label={name}\n              value={codeName}\n              onChange={() => handlePackageManagerChange(codeName)}\n            />\n          ))}\n        </>\n      </div>\n    </article>\n  );\n}\n\nPackageManager.propTypes = {\n  data: PropTypes.shape({\n    selectedManager: PropTypes.string,\n    setSelectedManager: PropTypes.func\n  }),\n};\n\nexport default PackageManager;\n","import React, {useCallback} from \"react\";\nimport PropTypes from 'prop-types';\nimport './InstallPackages.css';\nimport Checkbox from \"../../../common/checkbox/Checkbox\";\n\nimport packages from \"./../../../../database/packages.json\";\n\nconst InstallPackages = ({ data: { selectedPackages, setSelectedPackages } }) => {\n  const handleInstallPackagesChange = useCallback(codeName => {\n    if (selectedPackages.includes(codeName)) {\n      let tempArr = selectedPackages;\n      tempArr.splice(selectedPackages.indexOf(codeName), 1);\n      setSelectedPackages([...tempArr]);\n    } else {\n      setSelectedPackages([...selectedPackages, codeName]);\n    }\n  }, [selectedPackages, setSelectedPackages]);\n\n  return (\n    <article className=\"install-packages\">\n      <h5 className=\"install-packages__title\">\n        Which package manager to use?\n      </h5>\n      <div className=\"install-packages__form\">\n        <>\n          {packages.map(({ id, codeName, name, status }) => (\n            <Checkbox\n              className=\"install-packages__label\"\n              key={id+codeName}\n              checked={selectedPackages.includes(codeName)}\n              disabled={!status}\n              label={name}\n              value={codeName}\n              onChange={() => handleInstallPackagesChange(codeName)}\n            />\n          ))}\n        </>\n      </div>\n    </article>\n  );\n}\n\nInstallPackages.propTypes = {\n  data: PropTypes.shape({\n    selectedPackages: PropTypes.array,\n    setSelectedPackages: PropTypes.func\n  }),\n};\n\nexport default InstallPackages;\n","import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport './Modal.css'\n\nconst Modal = ({ content }) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (content) {\n      setIsVisible(true);\n      setInterval(() => setIsVisible(false), 3000);\n    }\n  }, [content]);\n\n  return (\n  <>\n    {isVisible && <div className=\"Modal\">\n      {content}\n    </div>}\n  </>\n)};\n\nModal.propTypes = {\n  content: PropTypes.string,\n};\n\nexport default Modal;\n","import React, {useCallback, useMemo, useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport './GetScript.css';\nimport packages from \"./../../../../database/packages.json\";\nimport * as scripts from \"./../../../../database/scripts\";\nimport Modal from \"../../../common/modal/Modal\";\n\nconst scriptWasCopiedText = 'This script was copied to clipboard by click'\nconst GetScript = ({ data: { selectedManager, selectedPackages } }) => {\n  const isNeedCurl = useMemo(\n    () => selectedPackages.some((item) => scripts.curl.should.includes(item)),\n    [selectedPackages]\n  );\n  const [modalContent, setModalContent] = useState(null);\n\n  const copyToClipboard = useCallback( event => {\n    navigator.clipboard.writeText(event.target.innerText);\n    setModalContent(scriptWasCopiedText);\n    setInterval(() => setModalContent(null), 3000);\n  }, [setModalContent]);\n\n  return (\n    <div className=\"get-script\">\n      <p>\n        You are selected {selectedManager} package manager. Please, before are\n        run next script, will update your system.\n      </p>\n      <div className=\"get-script__badges\">\n        {packages.map((item, index) => (\n          <span\n            key={index+100}\n            className={`get-script__badge-item ${selectedPackages.includes(item.codeName) && \"get-script__badge-item--selected\"}`}\n          >\n            {packages[index].name}\n          </span>\n        ))}\n      </div>\n      {isNeedCurl && (\n        <p className=\"get-script__warning-message\">\n          <strong>Warning</strong>&nbsp;\n          You are selected some package, which\n          &nbsp;<strong>need to install curl</strong>\n        </p>\n      )}\n      <span\n        className=\"get-script__code\"\n        onClick={copyToClipboard}\n      >\n        {isNeedCurl &&\n          scripts.curl[selectedManager].map((str, indexStr) => (\n            <React.Fragment key={indexStr+200}>\n              {`${str}`}\n              <br/>\n            </React.Fragment>\n          ))}\n        {selectedPackages.map((item, indexItem) => (\n          <React.Fragment key={indexItem+300}>\n            {scripts[item][selectedManager].map((str, indexString) => (\n              <React.Fragment key={indexString+400}>\n                <br/>\n                {`${str}`}\n              </React.Fragment>\n            ))}\n            <br/>\n          </React.Fragment>\n        ))}\n      </span>\n      <Modal content={modalContent}/>\n    </div>\n  );\n}\n\nGetScript.propTypes = {\n  data: PropTypes.shape({\n    selectedManager: PropTypes.string,\n    selectedPackages: PropTypes.array\n  }),\n};\n\nexport default GetScript;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Steps.css'\n\nconst Steps = ({ currentStep, totalSteps }) => (\n  <h2 className=\"steps\">\n    Step {currentStep} of {totalSteps}\n  </h2>\n);\n\nSteps.propTypes = {\n  currentStep: PropTypes.number,\n  totalSteps: PropTypes.number\n};\n\nexport default Steps;\n","import React, {useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport './StepsControl.css'\n\nconst StepsControl = ({ currentStep, nextStepHandler, totalSteps, prevStepHandler }) => {\n  const isFirstStep = useMemo(() => currentStep === 0, [currentStep]);\n  const isLastStep = useMemo(() => currentStep === totalSteps, [currentStep, totalSteps]);\n\n  return (\n    <div className=\"steps-control\">\n      {!isFirstStep && (\n        <button\n          className=\"steps-control__button\"\n          type=\"button\"\n          value=\"prev\"\n          onClick={prevStepHandler}\n        >\n          Prev\n        </button>\n      )}\n      {!isLastStep && (\n        <button\n          className=\"steps-control__button\"\n          type=\"button\"\n          value=\"next\"\n          onClick={nextStepHandler}\n        >\n          Next\n        </button>\n      )}\n    </div>\n  )\n};\n\nStepsControl.propTypes = {\n  currentStep: PropTypes.number,\n  nextStepHandler: PropTypes.func,\n  totalSteps: PropTypes.number,\n  prevStepHandler: PropTypes.func\n};\n\nexport default StepsControl;\n","import React, {useState, useEffect, useMemo, useCallback} from \"react\";\nimport './BashGenerator.css';\n\nimport PackageManager from \"./steps/packageManager/packageManager\";\nimport InstallPackages from \"./steps/installPackages/installPackages\";\nimport GetScript from \"./steps/getScript/getScript\";\nimport Steps from \"../common/steps/Steps\";\nimport StepsControl from \"../common/steps/StepsControl\";\n\nconst bashGenParam = \"bashGen\";\n\nconst BashGenerator = () => {\n  const [isVisiblePalette, setIsVisiblePalette] = useState(false);\n  const [step, setStep] = useState(0);\n  const [selectedManager, setSelectedManager] = useState(\"apt\");\n  const [selectedPackages, setSelectedPackages] = useState([]);\n\n  const steps = useMemo(() => [\n    <PackageManager\n      key='package-manager'\n      data={{ selectedManager, setSelectedManager }}\n    />,\n    <InstallPackages\n      key='install-packages'\n      data={{ selectedPackages, setSelectedPackages }}\n    />,\n    <GetScript\n      key='get-script'\n      data={{ selectedManager, selectedPackages }}\n    />,\n  ], [selectedManager, selectedPackages, setSelectedManager, setSelectedPackages]);\n  const currentStep = useMemo(() => step + 1, [step]);\n  const totalSteps = useMemo(() => steps.length, [steps]);\n\n  const prevStepHandler = useCallback(event => {\n    event.preventDefault();\n    setStep(step === 0 ? 0 : step - 1);\n  }, [step, setStep]);\n\n  const nextStepHandler = useCallback(event => {\n    event.preventDefault();\n    setStep(step === 2 ? 2 : step + 1);\n  }, [step, setStep]);\n\n  useEffect(() => {\n    if (document.location.hostname === 'localhost') {\n      setIsVisiblePalette(!isVisiblePalette);\n    }\n  }, [])\n\n  useEffect(() => {\n    if (sessionStorage.getItem(bashGenParam)) {\n      const {\n        step = 0,\n        selectedManager = \"apt\",\n        selectedPackages = [],\n      } = JSON.parse(sessionStorage.getItem(bashGenParam));\n      setStep(step);\n      setSelectedManager(selectedManager);\n      setSelectedPackages(selectedPackages);\n    }\n  }, []);\n\n  useEffect(() => {\n    sessionStorage.setItem(\n      bashGenParam,\n      JSON.stringify({ step, selectedManager, selectedPackages, data: \"pisos\" })\n    );\n  }, [step, selectedManager, selectedPackages]);\n\n  return (\n    <section className=\"bash-generator\">\n      <Steps\n        currentStep={currentStep}\n        totalSteps={totalSteps}\n      />\n      <div className=\"bash-generator__content\">\n        {steps[step]}\n      </div>\n      <StepsControl\n        currentStep={currentStep}\n        nextStepHandler={nextStepHandler}\n        totalSteps={totalSteps}\n        prevStepHandler={prevStepHandler}\n      />\n      {isVisiblePalette && <div className=\"bash-generator__palette\">\n        <div className=\"bash-generator__palette--black\">black</div>\n        <div className=\"bash-generator__palette--blue\">blue</div>\n        <div className=\"bash-generator__palette--green\">green</div>\n        <div className=\"bash-generator__palette--cyan\">cyan</div>\n        <div className=\"bash-generator__palette--red\">red</div>\n        <div className=\"bash-generator__palette--magenta\">magenta</div>\n        <div className=\"bash-generator__palette--brown\">brown</div>\n        <div className=\"bash-generator__palette--light-gray\">light-gray</div>\n        <div className=\"bash-generator__palette--dark-gray\">dark-gray</div>\n        <div className=\"bash-generator__palette--light-blue\">light-blue</div>\n        <div className=\"bash-generator__palette--light-green\">light-green</div>\n        <div className=\"bash-generator__palette--light-cyan\">light-cyan</div>\n        <div className=\"bash-generator__palette--light-red\">light-red</div>\n        <div className=\"bash-generator__palette--light-magenta\">light-magenta</div>\n        <div className=\"bash-generator__palette--yellow\">yellow</div>\n        <div className=\"bash-generator__palette--white\">white</div>\n      </div>}\n    </section>\n  );\n}\nexport default BashGenerator;\n"],"names":["_ref","checked","disabled","label","value","onChange","_jsxs","className","children","_jsx","type","data","selectedManager","setSelectedManager","handlePackageManagerChange","useCallback","codeName","_Fragment","packageManagers","map","_ref2","id","name","status","Checkbox","selectedPackages","setSelectedPackages","handleInstallPackagesChange","includes","tempArr","splice","indexOf","packages","content","isVisible","setIsVisible","useState","useEffect","setInterval","isNeedCurl","useMemo","some","item","scripts","should","modalContent","setModalContent","copyToClipboard","event","navigator","clipboard","writeText","target","innerText","index","onClick","str","indexStr","React","indexItem","indexString","Modal","currentStep","totalSteps","nextStepHandler","prevStepHandler","isFirstStep","isLastStep","bashGenParam","BashGenerator","isVisiblePalette","setIsVisiblePalette","step","setStep","steps","PackageManager","InstallPackages","GetScript","length","preventDefault","document","location","hostname","sessionStorage","getItem","JSON","parse","setItem","stringify","Steps","StepsControl"],"sourceRoot":""}